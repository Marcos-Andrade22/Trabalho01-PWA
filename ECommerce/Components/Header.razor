@using ECommerce.Services
@inject CarrinhoService CarrinhoService
@inject AuthService AuthService
@inject NavigationManager Navigation

<header class="flex justify-between items-center p-4 bg-cherry3 text-white rounded-2xl shadow-md">
  <h1 class="text-xl font-bold">Flores & Encantos</h1>
  <nav class="flex items-center space-x-4">
    <div class="flex items-center space-x-1">
      <img src="./Assets/home.png" class="w-5 h-5 filter invert inline-block" alt="Home" />
      <a href="javascript:void(0)" @onclick="HandleHomeClick" class="hover:underline cursor-pointer">Home</a>
    </div>
    <div class="flex items-center space-x-1">
      <img src="./Assets/info.png" class="w-5 h-5 filter invert inline-block" alt="Sobre" />
      <a href="/sobre" class="hover:underline">Sobre</a>
    </div>
    <div class="flex items-center space-x-1 relative">
      <img src="./Assets/cart.png" class="w-5 h-5 filter invert inline-block" alt="Carrinho" />
      <a href="/carrinho" class="hover:underline">Carrinho</a>

      @* Badge que aparece somente se tiver pelo menos 1 item *@
      @if (CarrinhoService.Itens.Count > 0)
      {
        <span
          class="absolute -top-1 -right-3 bg-cherry4 text-cherry1 text-xs font-bold rounded-full w-5 h-5 flex items-center justify-center">
          @CarrinhoService.Itens.Sum(i => i.Quantidade)
        </span>
      }
    </div>
    
    @* Shows login/logout based on authentication status *@
    @if (AuthService.IsAuthenticated)
    {
      <div class="flex items-center space-x-2">
        <button @onclick="HandleLogout" class="text-sm hover:underline cursor-pointer bg-transparent border-none text-white">Sair</button>
      </div>
    }
  </nav>
</header>

@code {
  protected override void OnInitialized()
  {
    //Atualiza esse componente sempre que o carrinho mudar
    CarrinhoService.OnChange += StateHasChanged;
    
    //Atualiza esse componente sempre que o estado de autenticação mudar
    AuthService.OnAuthStateChanged += StateHasChanged;
  }

  private void HandleHomeClick()
  {
    if (AuthService.IsAuthenticated)
    {
      Navigation.NavigateTo("/home");
    }
    else
    {
      Navigation.NavigateTo("/");
    }
  }

  private async Task HandleLogout()
  {
    await AuthService.LogoutAsync();
    Navigation.NavigateTo("/");
  }

  public void Dispose()
  {
    CarrinhoService.OnChange -= StateHasChanged;
    AuthService.OnAuthStateChanged -= StateHasChanged;
  }
}