@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Login - ECommerce</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="card-header">
            <div class="logo-container">
                <h1 class="title">Bem-vindo de volta</h1>
                <p class="subtitle">Entre na sua conta</p>
            </div>
        </div>

        <div class="card-body">
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="alert @(isSuccess ? "alert-success" : "alert-error")">
                        <div class="alert-icon">
                            @if (isSuccess)
                            {
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="20,6 9,17 4,12"></polyline>
                                </svg>
                            }
                            else
                            {
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <line x1="15" y1="9" x2="9" y2="15"></line>
                                    <line x1="9" y1="9" x2="15" y2="15"></line>
                                </svg>
                            }
                        </div>
                        <span>@message</span>
                    </div>
                }

                <div class="form-group">
                    <div class="input-container">
                        <div class="input-icon">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>
                        </div>
                        <InputText id="username" 
                                 type="text" 
                                 class="form-input" 
                                 @bind-Value="loginModel.Username" 
                                 placeholder="seu-usuario" />
                        <label for="username" class="form-label">Usuário</label>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Username)" class="validation-message" />
                </div>

                <div class="form-group">
                    <div class="input-container">
                        <div class="input-icon">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                                <circle cx="12" cy="16" r="1"></circle>
                                <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                            </svg>
                        </div>
                        <InputText id="password" 
                                 type="password" 
                                 class="form-input" 
                                 @bind-Value="loginModel.Password" 
                                 placeholder="••••••••" />
                        <label for="password" class="form-label">Senha</label>
                    </div>
                    <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
                </div>

                <div class="form-options">
                    <div class="remember-me">
                        <label class="checkbox-container">
                            <InputCheckbox @bind-Value="loginModel.RememberMe" class="checkbox-input" />
                            <span class="checkbox-checkmark"></span>
                            <span class="checkbox-text">Lembrar de mim</span>
                        </label>
                    </div>
                    <a href="/forgot-password" class="forgot-password-link">
                        Esqueceu a senha?
                    </a>
                </div>

                <button type="submit" 
                        class="submit-btn @(isLoading ? "loading" : "")" 
                        disabled="@isLoading">
                    @if (isLoading)
                    {
                        <div class="loading-spinner"></div>
                        <span>Entrando...</span>
                    }
                    else
                    {
                        <span>Entrar</span>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <line x1="5" y1="12" x2="19" y2="12"></line>
                            <polyline points="12,5 19,12 12,19"></polyline>
                        </svg>
                    }
                </button>
            </EditForm>

            <div class="divider">
                <span>ou</span>
            </div>

            <div class="social-login">
                <button class="social-btn google-btn" type="button">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/>
                        <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/>
                        <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/>
                        <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/>
                    </svg>
                    Continuar com Google
                </button>
            </div>

            <div class="register-link">
                <p>Não tem uma conta?</p>
                <a href="/register" class="link-btn">
                    Criar conta
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="7" y1="17" x2="17" y2="7"></line>
                        <polyline points="7,7 17,7 17,17"></polyline>
                    </svg>
                </a>
            </div>
        </div>
    </div>
</div>

<style>
    * {
        box-sizing: border-box;
    }

    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem 1rem;
        background: #f8f9fa;
        position: relative;
    }

    .login-card {
        background: white;
        border-radius: 24px;
        box-shadow: 0 20px 40px rgba(170, 111, 115, 0.15);
        width: 100%;
        max-width: 450px;
        position: relative;
        z-index: 2;
        overflow: hidden;
        animation: slideUp 0.6s ease-out;
        border: 2px solid rgba(170, 111, 115, 0.1);
    }

    .card-header {
        padding: 3rem 2rem 1rem;
        text-align: center;
        background: white;
        border-bottom: 1px solid rgba(170, 111, 115, 0.1);
    }

    .logo-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
    }

    .logo-icon {
        width: 60px;
        height: 60px;
        background: #AA6F73;
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        margin-bottom: 1rem;
        animation: pulse 2s infinite;
    }

    .title {
        font-size: 2rem;
        font-weight: 700;
        color: #AA6F73;
        margin: 0;
    }

    .subtitle {
        color: #718096;
        margin: 0;
        font-size: 1rem;
    }

    .card-body {
        padding: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .input-container {
        position: relative;
        display: flex;
        align-items: center;
    }

    .input-icon {
        position: absolute;
        left: 1rem;
        color: #a0aec0;
        z-index: 2;
        transition: color 0.3s ease;
    }

    .form-input {
        width: 100%;
        padding: 1rem 1rem 1rem 3rem;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        font-size: 1rem;
        background: #ffffff;
        transition: all 0.3s ease;
        outline: none;
    }

    .form-input:focus {
        border-color: #AA6F73;
        box-shadow: 0 0 0 3px rgba(170, 111, 115, 0.1);
        transform: translateY(-1px);
    }

    .form-input:focus + .form-label,
    .form-input:not(:placeholder-shown) + .form-label {
        transform: translateY(-2.5rem) scale(0.85);
        color: #AA6F73;
        font-weight: 600;
    }

    .form-input:focus ~ .input-icon {
        color: #AA6F73;
    }

    .form-label {
        position: absolute;
        left: 3rem;
        top: 50%;
        transform: translateY(-50%);
        color: #a0aec0;
        font-size: 1rem;
        transition: all 0.3s ease;
        pointer-events: none;
        background: white;
        padding: 0 0.5rem;
    }

    .validation-message {
        color: #e53e3e;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        animation: shake 0.5s ease-in-out;
    }

    .form-options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .remember-me {
        display: flex;
        align-items: center;
    }

    .checkbox-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        font-size: 0.875rem;
        color: #4a5568;
    }

    .checkbox-input {
        display: none;
    }

    .checkbox-checkmark {
        width: 18px;
        height: 18px;
        border: 2px solid #e2e8f0;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        position: relative;
    }

    .checkbox-input:checked + .checkbox-checkmark {
        background: #AA6F73;
        border-color: #AA6F73;
    }

    .checkbox-input:checked + .checkbox-checkmark::after {
        content: '✓';
        color: white;
        font-size: 12px;
        font-weight: bold;
    }

    .forgot-password-link {
        color: #AA6F73;
        text-decoration: none;
        font-size: 0.875rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .forgot-password-link:hover {
        color: #965A5E;
        text-decoration: underline;
    }

    .submit-btn {
        width: 100%;
        padding: 1rem 2rem;
        background: #AA6F73;
        color: white;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 1rem;
        position: relative;
        overflow: hidden;
    }

    .submit-btn:hover:not(.loading) {
        background: #965A5E;
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(170, 111, 115, 0.3);
    }

    .submit-btn:active {
        transform: translateY(0);
    }

    .submit-btn.loading {
        cursor: not-allowed;
        opacity: 0.8;
    }

    .loading-spinner {
        width: 20px;
        height: 20px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-top: 2px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .alert {
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        animation: slideDown 0.3s ease-out;
    }

    .alert-success {
        background: rgba(72, 187, 120, 0.1);
        color: #2f855a;
        border: 1px solid rgba(72, 187, 120, 0.2);
    }

    .alert-error {
        background: rgba(245, 101, 101, 0.1);
        color: #c53030;
        border: 1px solid rgba(245, 101, 101, 0.2);
    }

    .alert-icon {
        display: flex;
        align-items: center;
    }

    .divider {
        display: flex;
        align-items: center;
        margin: 2rem 0;
        color: #a0aec0;
        font-size: 0.875rem;
    }

    .divider::before,
    .divider::after {
        content: '';
        flex: 1;
        height: 1px;
        background: #e2e8f0;
    }

    .divider span {
        margin: 0 1rem;
    }

    .social-login {
        margin-bottom: 2rem;
    }

    .social-btn {
        width: 100%;
        padding: 0.875rem 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        background: white;
        color: #4a5568;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
    }

    .social-btn:hover {
        border-color: #AA6F73;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(170, 111, 115, 0.1);
    }

    .register-link {
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
    }

    .register-link p {
        color: #718096;
        margin: 0;
        font-size: 0.875rem;
    }

    .link-btn {
        color: #AA6F73;
        text-decoration: none;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        padding: 0.5rem 1rem;
        border-radius: 8px;
    }

    .link-btn:hover {
        background: rgba(170, 111, 115, 0.1);
        transform: translateY(-1px);
    }
</style>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string message = "";
    private bool isSuccess = false;

    private async Task HandleLogin()
    {
        if (isLoading) return;

        isLoading = true;
        message = "";

        try
        {
            var loginRequest = new
            {
                Username = loginModel.Username,
                Password = loginModel.Password
            };

            var json = JsonSerializer.Serialize(loginRequest);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            // Ajuste a URL conforme sua configuração da API
            var response = await Http.PostAsync("https://localhost:7001/api/auth/login", content);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<LoginResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (result?.Success == true)
                {
                    isSuccess = true;
                    message = "Login realizado com sucesso! Redirecionando...";
                    await Task.Delay(1500);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    isSuccess = false;
                    message = result?.Message ?? "Erro no login";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var errorResult = JsonSerializer.Deserialize<LoginResponse>(errorContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                isSuccess = false;
                message = errorResult?.Message ?? "Usuário ou senha incorretos";
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            message = $"Erro de conexão: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Usuário é obrigatório")]
        [MinLength(3, ErrorMessage = "Usuário deve ter pelo menos 3 caracteres")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Senha é obrigatória")]
        [MinLength(6, ErrorMessage = "Senha deve ter pelo menos 6 caracteres")]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; } = false;
    }

    public class LoginResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";
        public UserInfo? User { get; set; }
    }

    public class UserInfo
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string Email { get; set; } = "";
    }
}